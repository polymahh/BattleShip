(()=>{"use strict";var n={837:(n,r,e)=>{e.d(r,{Z:()=>a});var t=e(537),i=e.n(t),o=e(645),s=e.n(o)()(i());s.push([n.id,'/*! normalize.css v3.0.2 | MIT License | git.io/normalize */\r\n\r\n/**\r\n * 1. Set default font family to sans-serif.\r\n * 2. Prevent iOS text size adjust after orientation change, without disabling\r\n *    user zoom.\r\n */\r\n\r\nhtml {\r\n  font-family: sans-serif; /* 1 */\r\n  -ms-text-size-adjust: 100%; /* 2 */\r\n  -webkit-text-size-adjust: 100%; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove default margin.\r\n */\r\n\r\nbody {\r\n  margin: 0;\r\n}\r\n\r\n/* HTML5 display definitions\r\n   ========================================================================== */\r\n\r\n/**\r\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\r\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\r\n * and Firefox.\r\n * Correct `block` display not defined for `main` in IE 11.\r\n */\r\n\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmain,\r\nmenu,\r\nnav,\r\nsection,\r\nsummary {\r\n  display: block;\r\n}\r\n\r\n/**\r\n * 1. Correct `inline-block` display not defined in IE 8/9.\r\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\r\n */\r\n\r\naudio,\r\ncanvas,\r\nprogress,\r\nvideo {\r\n  display: inline-block; /* 1 */\r\n  vertical-align: baseline; /* 2 */\r\n}\r\n\r\n/**\r\n * Prevent modern browsers from displaying `audio` without controls.\r\n * Remove excess height in iOS 5 devices.\r\n */\r\n\r\naudio:not([controls]) {\r\n  display: none;\r\n  height: 0;\r\n}\r\n\r\n/**\r\n * Address `[hidden]` styling not present in IE 8/9/10.\r\n * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.\r\n */\r\n\r\n[hidden],\r\ntemplate {\r\n  display: none;\r\n}\r\n\r\n/* Links\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove the gray background color from active links in IE 10.\r\n */\r\n\r\na {\r\n  background-color: transparent;\r\n}\r\n\r\n/**\r\n * Improve readability when focused and also mouse hovered in all browsers.\r\n */\r\n\r\na:active,\r\na:hover {\r\n  outline: 0;\r\n}\r\n\r\n/* Text-level semantics\r\n   ========================================================================== */\r\n\r\n/**\r\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\r\n */\r\n\r\nabbr[title] {\r\n  border-bottom: 1px dotted;\r\n}\r\n\r\n/**\r\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nb,\r\nstrong {\r\n  font-weight: bold;\r\n}\r\n\r\n/**\r\n * Address styling not present in Safari and Chrome.\r\n */\r\n\r\ndfn {\r\n  font-style: italic;\r\n}\r\n\r\n/**\r\n * Address variable `h1` font-size and margin within `section` and `article`\r\n * contexts in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  margin: 0.67em 0;\r\n}\r\n\r\n/**\r\n * Address styling not present in IE 8/9.\r\n */\r\n\r\nmark {\r\n  background: #ff0;\r\n  color: #000;\r\n}\r\n\r\n/**\r\n * Address inconsistent and variable font size in all browsers.\r\n */\r\n\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n\r\n/**\r\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\r\n */\r\n\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\n\r\nsup {\r\n  top: -0.5em;\r\n}\r\n\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n\r\n/* Embedded content\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove border when inside `a` element in IE 8/9/10.\r\n */\r\n\r\nimg {\r\n  border: 0;\r\n}\r\n\r\n/**\r\n * Correct overflow not hidden in IE 9/10/11.\r\n */\r\n\r\nsvg:not(:root) {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Grouping content\r\n   ========================================================================== */\r\n\r\n/**\r\n * Address margin not present in IE 8/9 and Safari.\r\n */\r\n\r\nfigure {\r\n  margin: 1em 40px;\r\n}\r\n\r\n/**\r\n * Address differences between Firefox and other browsers.\r\n */\r\n\r\nhr {\r\n  -moz-box-sizing: content-box;\r\n  box-sizing: content-box;\r\n  height: 0;\r\n}\r\n\r\n/**\r\n * Contain overflow in all browsers.\r\n */\r\n\r\npre {\r\n  overflow: auto;\r\n}\r\n\r\n/**\r\n * Address odd `em`-unit font size rendering in all browsers.\r\n */\r\n\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  font-size: 1em;\r\n}\r\n\r\n/* Forms\r\n   ========================================================================== */\r\n\r\n/**\r\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\r\n * styling of `select`, unless a `border` property is set.\r\n */\r\n\r\n/**\r\n * 1. Correct color not being inherited.\r\n *    Known issue: affects color of disabled elements.\r\n * 2. Correct font properties not being inherited.\r\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  color: inherit; /* 1 */\r\n  font: inherit; /* 2 */\r\n  margin: 0; /* 3 */\r\n}\r\n\r\n/**\r\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\r\n */\r\n\r\nbutton {\r\n  overflow: visible;\r\n}\r\n\r\n/**\r\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\r\n * All other form control elements do not inherit `text-transform` values.\r\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\r\n * Correct `select` style inheritance in Firefox.\r\n */\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none;\r\n}\r\n\r\n/**\r\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\r\n *    and `video` controls.\r\n * 2. Correct inability to style clickable `input` types in iOS.\r\n * 3. Improve usability and consistency of cursor style between image-type\r\n *    `input` and others.\r\n */\r\n\r\nbutton,\r\nhtml input[type="button"], /* 1 */\r\ninput[type="reset"],\r\ninput[type="submit"] {\r\n  -webkit-appearance: button; /* 2 */\r\n  cursor: pointer; /* 3 */\r\n}\r\n\r\n/**\r\n * Re-set default cursor for disabled elements.\r\n */\r\n\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n  cursor: default;\r\n}\r\n\r\n/**\r\n * Remove inner padding and border in Firefox 4+.\r\n */\r\n\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n  border: 0;\r\n  padding: 0;\r\n}\r\n\r\n/**\r\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\r\n * the UA stylesheet.\r\n */\r\n\r\ninput {\r\n  line-height: normal;\r\n}\r\n\r\n/**\r\n * It\'s recommended that you don\'t attempt to style these elements.\r\n * Firefox\'s implementation doesn\'t respect box-sizing, padding, or width.\r\n *\r\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\r\n * 2. Remove excess padding in IE 8/9/10.\r\n */\r\n\r\ninput[type="checkbox"],\r\ninput[type="radio"] {\r\n  box-sizing: border-box; /* 1 */\r\n  padding: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Fix the cursor style for Chrome\'s increment/decrement buttons. For certain\r\n * `font-size` values of the `input`, it causes the cursor style of the\r\n * decrement button to change from `default` to `text`.\r\n */\r\n\r\ninput[type="number"]::-webkit-inner-spin-button,\r\ninput[type="number"]::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n\r\n/**\r\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\r\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome\r\n *    (include `-moz` to future-proof).\r\n */\r\n\r\ninput[type="search"] {\r\n  -webkit-appearance: textfield; /* 1 */\r\n  -moz-box-sizing: content-box;\r\n  -webkit-box-sizing: content-box; /* 2 */\r\n  box-sizing: content-box;\r\n}\r\n\r\n/**\r\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\r\n * Safari (but not Chrome) clips the cancel button when the search input has\r\n * padding (and `textfield` appearance).\r\n */\r\n\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/**\r\n * Define consistent border, margin, and padding.\r\n */\r\n\r\nfieldset {\r\n  border: 1px solid #c0c0c0;\r\n  margin: 0 2px;\r\n  padding: 0.35em 0.625em 0.75em;\r\n}\r\n\r\n/**\r\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\r\n * 2. Remove padding so people aren\'t caught out if they zero out fieldsets.\r\n */\r\n\r\nlegend {\r\n  border: 0; /* 1 */\r\n  padding: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove default vertical scrollbar in IE 8/9/10/11.\r\n */\r\n\r\ntextarea {\r\n  overflow: auto;\r\n}\r\n\r\n/**\r\n * Don\'t inherit the `font-weight` (applied by a rule above).\r\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\r\n */\r\n\r\noptgroup {\r\n  font-weight: bold;\r\n}\r\n\r\n/* Tables\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove most spacing between table cells.\r\n */\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\ntd,\r\nth {\r\n  padding: 0;\r\n}',"",{version:3,sources:["webpack://./src/css/normalize.css"],names:[],mappings:"AAAA,2DAA2D;;AAE3D;;;;EAIE;;AAEF;EACE,uBAAuB,EAAE,MAAM;EAC/B,0BAA0B,EAAE,MAAM;EAClC,8BAA8B,EAAE,MAAM;AACxC;;AAEA;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;+EAC+E;;AAE/E;;;;;EAKE;;AAEF;;;;;;;;;;;;;EAaE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;;;;EAIE,qBAAqB,EAAE,MAAM;EAC7B,wBAAwB,EAAE,MAAM;AAClC;;AAEA;;;EAGE;;AAEF;EACE,aAAa;EACb,SAAS;AACX;;AAEA;;;EAGE;;AAEF;;EAEE,aAAa;AACf;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,6BAA6B;AAC/B;;AAEA;;EAEE;;AAEF;;EAEE,UAAU;AACZ;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,yBAAyB;AAC3B;;AAEA;;EAEE;;AAEF;;EAEE,iBAAiB;AACnB;;AAEA;;EAEE;;AAEF;EACE,kBAAkB;AACpB;;AAEA;;;EAGE;;AAEF;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;;EAEE;;AAEF;EACE,gBAAgB;EAChB,WAAW;AACb;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,gBAAgB;AAClB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,gBAAgB;AAClB;;AAEA;;EAEE;;AAEF;EACE,4BAA4B;EAC5B,uBAAuB;EACvB,SAAS;AACX;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;EAEE;;AAEF;;;;EAIE,iCAAiC;EACjC,cAAc;AAChB;;AAEA;+EAC+E;;AAE/E;;;EAGE;;AAEF;;;;;EAKE;;AAEF;;;;;EAKE,cAAc,EAAE,MAAM;EACtB,aAAa,EAAE,MAAM;EACrB,SAAS,EAAE,MAAM;AACnB;;AAEA;;EAEE;;AAEF;EACE,iBAAiB;AACnB;;AAEA;;;;;EAKE;;AAEF;;EAEE,oBAAoB;AACtB;;AAEA;;;;;;EAME;;AAEF;;;;EAIE,0BAA0B,EAAE,MAAM;EAClC,eAAe,EAAE,MAAM;AACzB;;AAEA;;EAEE;;AAEF;;EAEE,eAAe;AACjB;;AAEA;;EAEE;;AAEF;;EAEE,SAAS;EACT,UAAU;AACZ;;AAEA;;;EAGE;;AAEF;EACE,mBAAmB;AACrB;;AAEA;;;;;;EAME;;AAEF;;EAEE,sBAAsB,EAAE,MAAM;EAC9B,UAAU,EAAE,MAAM;AACpB;;AAEA;;;;EAIE;;AAEF;;EAEE,YAAY;AACd;;AAEA;;;;EAIE;;AAEF;EACE,6BAA6B,EAAE,MAAM;EACrC,4BAA4B;EAC5B,+BAA+B,EAAE,MAAM;EACvC,uBAAuB;AACzB;;AAEA;;;;EAIE;;AAEF;;EAEE,wBAAwB;AAC1B;;AAEA;;EAEE;;AAEF;EACE,yBAAyB;EACzB,aAAa;EACb,8BAA8B;AAChC;;AAEA;;;EAGE;;AAEF;EACE,SAAS,EAAE,MAAM;EACjB,UAAU,EAAE,MAAM;AACpB;;AAEA;;EAEE;;AAEF;EACE,cAAc;AAChB;;AAEA;;;EAGE;;AAEF;EACE,iBAAiB;AACnB;;AAEA;+EAC+E;;AAE/E;;EAEE;;AAEF;EACE,yBAAyB;EACzB,iBAAiB;AACnB;;AAEA;;EAEE,UAAU;AACZ",sourcesContent:['/*! normalize.css v3.0.2 | MIT License | git.io/normalize */\r\n\r\n/**\r\n * 1. Set default font family to sans-serif.\r\n * 2. Prevent iOS text size adjust after orientation change, without disabling\r\n *    user zoom.\r\n */\r\n\r\nhtml {\r\n  font-family: sans-serif; /* 1 */\r\n  -ms-text-size-adjust: 100%; /* 2 */\r\n  -webkit-text-size-adjust: 100%; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove default margin.\r\n */\r\n\r\nbody {\r\n  margin: 0;\r\n}\r\n\r\n/* HTML5 display definitions\r\n   ========================================================================== */\r\n\r\n/**\r\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\r\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\r\n * and Firefox.\r\n * Correct `block` display not defined for `main` in IE 11.\r\n */\r\n\r\narticle,\r\naside,\r\ndetails,\r\nfigcaption,\r\nfigure,\r\nfooter,\r\nheader,\r\nhgroup,\r\nmain,\r\nmenu,\r\nnav,\r\nsection,\r\nsummary {\r\n  display: block;\r\n}\r\n\r\n/**\r\n * 1. Correct `inline-block` display not defined in IE 8/9.\r\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\r\n */\r\n\r\naudio,\r\ncanvas,\r\nprogress,\r\nvideo {\r\n  display: inline-block; /* 1 */\r\n  vertical-align: baseline; /* 2 */\r\n}\r\n\r\n/**\r\n * Prevent modern browsers from displaying `audio` without controls.\r\n * Remove excess height in iOS 5 devices.\r\n */\r\n\r\naudio:not([controls]) {\r\n  display: none;\r\n  height: 0;\r\n}\r\n\r\n/**\r\n * Address `[hidden]` styling not present in IE 8/9/10.\r\n * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.\r\n */\r\n\r\n[hidden],\r\ntemplate {\r\n  display: none;\r\n}\r\n\r\n/* Links\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove the gray background color from active links in IE 10.\r\n */\r\n\r\na {\r\n  background-color: transparent;\r\n}\r\n\r\n/**\r\n * Improve readability when focused and also mouse hovered in all browsers.\r\n */\r\n\r\na:active,\r\na:hover {\r\n  outline: 0;\r\n}\r\n\r\n/* Text-level semantics\r\n   ========================================================================== */\r\n\r\n/**\r\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\r\n */\r\n\r\nabbr[title] {\r\n  border-bottom: 1px dotted;\r\n}\r\n\r\n/**\r\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nb,\r\nstrong {\r\n  font-weight: bold;\r\n}\r\n\r\n/**\r\n * Address styling not present in Safari and Chrome.\r\n */\r\n\r\ndfn {\r\n  font-style: italic;\r\n}\r\n\r\n/**\r\n * Address variable `h1` font-size and margin within `section` and `article`\r\n * contexts in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nh1 {\r\n  font-size: 2em;\r\n  margin: 0.67em 0;\r\n}\r\n\r\n/**\r\n * Address styling not present in IE 8/9.\r\n */\r\n\r\nmark {\r\n  background: #ff0;\r\n  color: #000;\r\n}\r\n\r\n/**\r\n * Address inconsistent and variable font size in all browsers.\r\n */\r\n\r\nsmall {\r\n  font-size: 80%;\r\n}\r\n\r\n/**\r\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\r\n */\r\n\r\nsub,\r\nsup {\r\n  font-size: 75%;\r\n  line-height: 0;\r\n  position: relative;\r\n  vertical-align: baseline;\r\n}\r\n\r\nsup {\r\n  top: -0.5em;\r\n}\r\n\r\nsub {\r\n  bottom: -0.25em;\r\n}\r\n\r\n/* Embedded content\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove border when inside `a` element in IE 8/9/10.\r\n */\r\n\r\nimg {\r\n  border: 0;\r\n}\r\n\r\n/**\r\n * Correct overflow not hidden in IE 9/10/11.\r\n */\r\n\r\nsvg:not(:root) {\r\n  overflow: hidden;\r\n}\r\n\r\n/* Grouping content\r\n   ========================================================================== */\r\n\r\n/**\r\n * Address margin not present in IE 8/9 and Safari.\r\n */\r\n\r\nfigure {\r\n  margin: 1em 40px;\r\n}\r\n\r\n/**\r\n * Address differences between Firefox and other browsers.\r\n */\r\n\r\nhr {\r\n  -moz-box-sizing: content-box;\r\n  box-sizing: content-box;\r\n  height: 0;\r\n}\r\n\r\n/**\r\n * Contain overflow in all browsers.\r\n */\r\n\r\npre {\r\n  overflow: auto;\r\n}\r\n\r\n/**\r\n * Address odd `em`-unit font size rendering in all browsers.\r\n */\r\n\r\ncode,\r\nkbd,\r\npre,\r\nsamp {\r\n  font-family: monospace, monospace;\r\n  font-size: 1em;\r\n}\r\n\r\n/* Forms\r\n   ========================================================================== */\r\n\r\n/**\r\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\r\n * styling of `select`, unless a `border` property is set.\r\n */\r\n\r\n/**\r\n * 1. Correct color not being inherited.\r\n *    Known issue: affects color of disabled elements.\r\n * 2. Correct font properties not being inherited.\r\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\r\n */\r\n\r\nbutton,\r\ninput,\r\noptgroup,\r\nselect,\r\ntextarea {\r\n  color: inherit; /* 1 */\r\n  font: inherit; /* 2 */\r\n  margin: 0; /* 3 */\r\n}\r\n\r\n/**\r\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\r\n */\r\n\r\nbutton {\r\n  overflow: visible;\r\n}\r\n\r\n/**\r\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\r\n * All other form control elements do not inherit `text-transform` values.\r\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\r\n * Correct `select` style inheritance in Firefox.\r\n */\r\n\r\nbutton,\r\nselect {\r\n  text-transform: none;\r\n}\r\n\r\n/**\r\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\r\n *    and `video` controls.\r\n * 2. Correct inability to style clickable `input` types in iOS.\r\n * 3. Improve usability and consistency of cursor style between image-type\r\n *    `input` and others.\r\n */\r\n\r\nbutton,\r\nhtml input[type="button"], /* 1 */\r\ninput[type="reset"],\r\ninput[type="submit"] {\r\n  -webkit-appearance: button; /* 2 */\r\n  cursor: pointer; /* 3 */\r\n}\r\n\r\n/**\r\n * Re-set default cursor for disabled elements.\r\n */\r\n\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n  cursor: default;\r\n}\r\n\r\n/**\r\n * Remove inner padding and border in Firefox 4+.\r\n */\r\n\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n  border: 0;\r\n  padding: 0;\r\n}\r\n\r\n/**\r\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\r\n * the UA stylesheet.\r\n */\r\n\r\ninput {\r\n  line-height: normal;\r\n}\r\n\r\n/**\r\n * It\'s recommended that you don\'t attempt to style these elements.\r\n * Firefox\'s implementation doesn\'t respect box-sizing, padding, or width.\r\n *\r\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\r\n * 2. Remove excess padding in IE 8/9/10.\r\n */\r\n\r\ninput[type="checkbox"],\r\ninput[type="radio"] {\r\n  box-sizing: border-box; /* 1 */\r\n  padding: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Fix the cursor style for Chrome\'s increment/decrement buttons. For certain\r\n * `font-size` values of the `input`, it causes the cursor style of the\r\n * decrement button to change from `default` to `text`.\r\n */\r\n\r\ninput[type="number"]::-webkit-inner-spin-button,\r\ninput[type="number"]::-webkit-outer-spin-button {\r\n  height: auto;\r\n}\r\n\r\n/**\r\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\r\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome\r\n *    (include `-moz` to future-proof).\r\n */\r\n\r\ninput[type="search"] {\r\n  -webkit-appearance: textfield; /* 1 */\r\n  -moz-box-sizing: content-box;\r\n  -webkit-box-sizing: content-box; /* 2 */\r\n  box-sizing: content-box;\r\n}\r\n\r\n/**\r\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\r\n * Safari (but not Chrome) clips the cancel button when the search input has\r\n * padding (and `textfield` appearance).\r\n */\r\n\r\ninput[type="search"]::-webkit-search-cancel-button,\r\ninput[type="search"]::-webkit-search-decoration {\r\n  -webkit-appearance: none;\r\n}\r\n\r\n/**\r\n * Define consistent border, margin, and padding.\r\n */\r\n\r\nfieldset {\r\n  border: 1px solid #c0c0c0;\r\n  margin: 0 2px;\r\n  padding: 0.35em 0.625em 0.75em;\r\n}\r\n\r\n/**\r\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\r\n * 2. Remove padding so people aren\'t caught out if they zero out fieldsets.\r\n */\r\n\r\nlegend {\r\n  border: 0; /* 1 */\r\n  padding: 0; /* 2 */\r\n}\r\n\r\n/**\r\n * Remove default vertical scrollbar in IE 8/9/10/11.\r\n */\r\n\r\ntextarea {\r\n  overflow: auto;\r\n}\r\n\r\n/**\r\n * Don\'t inherit the `font-weight` (applied by a rule above).\r\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\r\n */\r\n\r\noptgroup {\r\n  font-weight: bold;\r\n}\r\n\r\n/* Tables\r\n   ========================================================================== */\r\n\r\n/**\r\n * Remove most spacing between table cells.\r\n */\r\n\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n\r\ntd,\r\nth {\r\n  padding: 0;\r\n}'],sourceRoot:""}]);const a=s},402:(n,r,e)=>{e.d(r,{Z:()=>a});var t=e(537),i=e.n(t),o=e(645),s=e.n(o)()(i());s.push([n.id,"/* body{\r\n    position: absolute;\r\n} */\r\n\r\n.header {\r\n    margin: 20px;\r\n    background-color: azure;\r\n    border: 1px solid grey;\r\n    text-align: center;\r\n    border-radius: 15px;\r\n}\r\n\r\n.content {\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.container {\r\n    background-color: rgb(204, 204, 204);\r\n    margin: 30px;\r\n    width: 270px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    position: relative;\r\n\r\n}\r\n\r\n.box {\r\n    width: 25px;\r\n    height: 25px;\r\n    border: 1px solid;\r\n}\r\n.boxset {\r\n    width: 25px;\r\n    height: 25px;\r\n    border: 1px solid;\r\n    background-color: green;\r\n}\r\n\r\n#playerOne .box:hover{\r\n    font-size: 1.4em;\r\n    text-align: center;\r\n    background-color: rgb(248, 156, 35);\r\n    \r\n}\r\n\r\n.box.sunk{\r\n    content: 'X';\r\n    background-color: rgb(134, 12, 12);\r\n    \r\n}\r\n\r\n.line {\r\n    border: 1px solid gray;\r\n}\r\n\r\n.starting {\r\n    background-color: rgb(204, 204, 204);\r\n    border: 1px solid grey;\r\n    border-radius: 15px;\r\n    min-width: 90vw;\r\n    min-height: 75vh;\r\n    position: absolute;\r\n    text-align: center;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 20px ;\r\n    \r\n}\r\n\r\n.winner {\r\n    display: none;\r\n    background-color: rgb(204, 204, 204,0);\r\n    border: 1px solid grey;\r\n    border-radius: 15px;\r\n    min-width: 90vw;\r\n    min-height: 75vh;\r\n    position: absolute;\r\n    text-align: center;\r\n    padding: 20px ;\r\n    justify-content: center;\r\n    \r\n}\r\n\r\n.winner div{\r\n    width: 300px;\r\n    height: 150px;\r\n    background-color: rgb(231, 231, 231);\r\n    border: 5px solid #05b614 ;\r\n    padding: 40px;\r\n    text-align: center;\r\n}\r\n\r\n.form label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: rgb(37, 37, 37);\r\n\r\n}\r\n\r\n.form input {\r\n    /* width: 100%; */\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #b3b3b3;\r\n    padding: 10px;\r\n    margin: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.starting .container{\r\n    margin: 0;\r\n\r\n}\r\n\r\n#startGame{\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #202020;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    font-size: 18px;\r\n}\r\n\r\n#direction{\r\n    position: absolute;\r\n    left: 290px;\r\n    top: 90px;\r\n\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #202020;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    font-size: 18px;\r\n\r\n}\r\n#error{\r\n    \r\n    color: red;\r\n}\r\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;;GAEG;;AAEH;IACI,YAAY;IACZ,uBAAuB;IACvB,sBAAsB;IACtB,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;;IAEI,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,oCAAoC;IACpC,YAAY;IACZ,YAAY;IACZ,aAAa;IACb,eAAe;IACf,kBAAkB;;AAEtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;AACrB;AACA;IACI,WAAW;IACX,YAAY;IACZ,iBAAiB;IACjB,uBAAuB;AAC3B;;AAEA;IACI,gBAAgB;IAChB,kBAAkB;IAClB,mCAAmC;;AAEvC;;AAEA;IACI,YAAY;IACZ,kCAAkC;;AAEtC;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,oCAAoC;IACpC,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,cAAc;;AAElB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,sBAAsB;IACtB,mBAAmB;IACnB,eAAe;IACf,gBAAgB;IAChB,kBAAkB;IAClB,kBAAkB;IAClB,cAAc;IACd,uBAAuB;;AAE3B;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,oCAAoC;IACpC,0BAA0B;IAC1B,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,iBAAiB;IACjB,sBAAsB;;AAE1B;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,kBAAkB;IAClB,yBAAyB;IACzB,aAAa;IACb,WAAW;IACX,eAAe;AACnB;;AAEA;IACI,SAAS;;AAEb;;AAEA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,kBAAkB;IAClB,WAAW;IACX,SAAS;;IAET,oBAAoB;IACpB,kBAAkB;IAClB,yBAAyB;IACzB,YAAY;IACZ,YAAY;IACZ,eAAe;;AAEnB;AACA;;IAEI,UAAU;AACd",sourcesContent:["/* body{\r\n    position: absolute;\r\n} */\r\n\r\n.header {\r\n    margin: 20px;\r\n    background-color: azure;\r\n    border: 1px solid grey;\r\n    text-align: center;\r\n    border-radius: 15px;\r\n}\r\n\r\n.content {\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n}\r\n\r\n.container {\r\n    background-color: rgb(204, 204, 204);\r\n    margin: 30px;\r\n    width: 270px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    position: relative;\r\n\r\n}\r\n\r\n.box {\r\n    width: 25px;\r\n    height: 25px;\r\n    border: 1px solid;\r\n}\r\n.boxset {\r\n    width: 25px;\r\n    height: 25px;\r\n    border: 1px solid;\r\n    background-color: green;\r\n}\r\n\r\n#playerOne .box:hover{\r\n    font-size: 1.4em;\r\n    text-align: center;\r\n    background-color: rgb(248, 156, 35);\r\n    \r\n}\r\n\r\n.box.sunk{\r\n    content: 'X';\r\n    background-color: rgb(134, 12, 12);\r\n    \r\n}\r\n\r\n.line {\r\n    border: 1px solid gray;\r\n}\r\n\r\n.starting {\r\n    background-color: rgb(204, 204, 204);\r\n    border: 1px solid grey;\r\n    border-radius: 15px;\r\n    min-width: 90vw;\r\n    min-height: 75vh;\r\n    position: absolute;\r\n    text-align: center;\r\n    display: flex;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    padding: 20px ;\r\n    \r\n}\r\n\r\n.winner {\r\n    display: none;\r\n    background-color: rgb(204, 204, 204,0);\r\n    border: 1px solid grey;\r\n    border-radius: 15px;\r\n    min-width: 90vw;\r\n    min-height: 75vh;\r\n    position: absolute;\r\n    text-align: center;\r\n    padding: 20px ;\r\n    justify-content: center;\r\n    \r\n}\r\n\r\n.winner div{\r\n    width: 300px;\r\n    height: 150px;\r\n    background-color: rgb(231, 231, 231);\r\n    border: 5px solid #05b614 ;\r\n    padding: 40px;\r\n    text-align: center;\r\n}\r\n\r\n.form label {\r\n    font-size: large;\r\n    font-weight: bold;\r\n    color: rgb(37, 37, 37);\r\n\r\n}\r\n\r\n.form input {\r\n    /* width: 100%; */\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #b3b3b3;\r\n    padding: 10px;\r\n    margin: 5px;\r\n    font-size: 14px;\r\n}\r\n\r\n.starting .container{\r\n    margin: 0;\r\n\r\n}\r\n\r\n#startGame{\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #202020;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    font-size: 18px;\r\n}\r\n\r\n#direction{\r\n    position: absolute;\r\n    left: 290px;\r\n    top: 90px;\r\n\r\n    font-family: inherit;\r\n    border-radius: 5px;\r\n    border: 1px solid #202020;\r\n    margin: 10px;\r\n    padding: 5px;\r\n    font-size: 18px;\r\n\r\n}\r\n#error{\r\n    \r\n    color: red;\r\n}\r\n"],sourceRoot:""}]);const a=s},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(t)for(var a=0;a<this.length;a++){var A=this[a][0];null!=A&&(s[A]=!0)}for(var d=0;d<n.length;d++){var l=[].concat(n[d]);t&&s[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),r.push(l))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(i," */"),s=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(s).concat([o]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var o={},s=[],a=0;a<n.length;a++){var A=n[a],d=t.base?A[0]+t.base:A[0],l=o[d]||0,c="".concat(d," ").concat(l);o[d]=l+1;var p=e(c),h={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==p)r[p].references++,r[p].updater(h);else{var u=i(h,t);t.byIndex=a,r.splice(a,0,{identifier:c,updater:u,references:1})}s.push(c)}return s}function i(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,i){var o=t(n=n||[],i=i||{});return function(n){n=n||[];for(var s=0;s<o.length;s++){var a=e(o[s]);r[a].references--}for(var A=t(n,i),d=0;d<o.length;d++){var l=e(o[d]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}o=A}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var i=void 0!==e.layer;i&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,i&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var i=r[t];if(void 0!==i)return i.exports;var o=r[t]={id:t,exports:{}};return n[t](o,o.exports,e),o.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),e.nc=void 0,(()=>{var n=e(379),r=e.n(n),t=e(795),i=e.n(t),o=e(569),s=e.n(o),a=e(565),A=e.n(a),d=e(216),l=e.n(d),c=e(589),p=e.n(c),h=e(837),u={};u.styleTagTransform=p(),u.setAttributes=A(),u.insert=s().bind(null,"head"),u.domAPI=i(),u.insertStyleElement=l(),r()(h.Z,u),h.Z&&h.Z.locals&&h.Z.locals;var E=e(402),m={};let b;function f(n,r){let e,t;for(let i=0;i<n.ships.length;i++)if(e=n.ships[i],t=e.location.filter((n=>n[0]===r[0]&&n[1]===r[1]))[0],t)return b=e,!0;if(!t)return!1}function g(n,r){f(n,r)&&!b.damage.includes[r]?function(n,r){n.damage.push(r),function(n){n.location.length===n.damage.length&&(n.isSunked=!0)}(n)}(b,r):(n.boardHits.push(r),console.log(n.boardHits))}m.styleTagTransform=p(),m.setAttributes=A(),m.insert=s().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=l(),r()(E.Z,m),E.Z&&E.Z.locals&&E.Z.locals;const C=function(n){let r=[],e=[];function t(n,r){let e=r[0],t=r[1],i=!f(n,r);return e<=9&&e>=0&&t<=9&&t>=0&&i}function i(n,e,i,o){let s=[];for(let n=0;n<o;n++)"hor"==i?s.push([e[0]+n,e[1]]):"ver"==i&&s.push([e[0],e[1]+n]);return r=s,r.every((r=>t(n,r)))}return{name:n,ships:e,boardHits:[],checkSpot:t,checkSpots:i,placeShip:function(n,t,o,s){i(n,t,o,s)?e.push({size:s,location:r,direction:o,damage:[],isSunked:!1}):console.log("something went worng")}}},y=[[{size:5,location:[[2,1],[3,1],[4,1],[5,1],[6,1]],direction:"hor",damage:[],isSunked:!1},{size:4,location:[[0,5],[1,5],[2,5],[3,5]],direction:"hor",damage:[],isSunked:!1},{size:3,location:[[8,5],[8,6],[8,7]],direction:"ver",damage:[],isSunked:!1},{size:3,location:[[2,8],[3,8],[4,8]],direction:"ver",damage:[],isSunked:!1},{size:2,location:[[5,3],[5,4]],direction:"ver",damage:[],isSunked:!1}],[{size:5,location:[[1,8],[2,8],[3,8],[4,8],[5,8]],direction:"hor",damage:[[1,8],[2,8]],isSunked:!1},{size:4,location:[[8,1],[8,2],[8,3],[8,4]],direction:"ver",damage:[],isSunked:!1},{size:3,location:[[1,2],[2,2],[3,2]],direction:"hor",damage:[],isSunked:!1},{size:3,location:[[4,5],[5,5],[6,5]],direction:"hor",damage:[],isSunked:!1},{size:2,location:[[9,8],[9,9]],direction:"ver",damage:[],isSunked:!1}]];let B;function x(n){for(let r=0;r<=9;r++)for(let e=0;e<=9;e++){let t=document.createElement("div");t.classList.add("box"),t.id=`${e},${r}`,n.appendChild(t)}}({starting:!0,direction:"hor",shipsToPlace:[{name:"Carrier",size:5},{name:"Battle Ship",size:4},{name:"destroyer",size:3},{name:"submarine",size:3},{name:"boat",size:2}],size:3,Init(){this.casheDom(),x(this.playerOneContainer),x(this.playerTwoContainer),x(this.playerStart),this.boxs=document.querySelectorAll(".starting .box"),this.playerOne=C("playerOne"),this.playerTwo=C("playerTwo"),B=this.playerTwo,this.setPlayerTwo(),this.render(),this.bindEvents(),console.log(this.boxs)},casheDom(){this.containner=document.querySelector(".content"),this.playerOneContainer=document.getElementById("playerOne"),this.playerTwoContainer=document.getElementById("playerTwo"),this.playerStart=document.getElementById("playerStart"),this.startingDiv=document.querySelector(".starting"),this.startButton=document.getElementById("startGame"),this.directionButton=document.getElementById("direction"),this.order=document.getElementById("order"),this.inputName=document.querySelector("#nameInput"),this.errorMessage=document.querySelector("#error"),this.winnerBoard=document.querySelector(".winner"),this.winnerName=document.querySelector(".winnerName")},bindEvents(){this.playerOneContainer.addEventListener("click",(n=>{let r=n.target.id.split(",").map((n=>Number(n)));console.log(r);let e=!1;this.playerTwo.boardHits.length>0&&(e=this.checkBoardHits(r,this.playerTwo),console.log(e)),this.starting||B!=this.playerTwo||e||(g(B,r),this.switchPlayer(),this.render())})),this.playerStart.addEventListener("mouseover",(n=>{let r=n.target.id.split(",").map((n=>Number(n))),e=this.playerOne.checkSpots(this.playerOne,r,this.direction,this.size),t=this.getShipBoxs(n.target.id);e?this.setColor(t,"lightGreen"):e||this.setColor(t,"red"),n.target.addEventListener("mouseleave",(n=>{t.map((n=>n.style.backgroundColor=""))})),console.log(e)})),this.playerStart.addEventListener("click",(n=>{let r=n.target.id.split(",").map((n=>Number(n)));this.starting&&"direction"!=n.target.id?this.playerOne.checkSpots(this.playerOne,r,this.direction,this.size)?(console.log(r),this.playerOne.placeShip(this.playerOne,r,this.direction,this.size),console.log(this.playerOne),this.shipsToPlace.shift(),console.log(this.shipsToPlace),this.render()):this.errorMessage.innerText="Wrong Spot":this.starting&&"direction"==n.target.id&&(console.log(this.direction),"hor"==this.direction?(this.direction="ver",this.directionButton.innerText="Vertical"):(this.direction="hor",this.directionButton.innerText="horizontal"))})),this.startButton.addEventListener("click",(()=>{this.shipsToPlace.length>0||""==this.inputName.value?this.errorMessage.innerText="Choose your Name and Place Your Ships":(console.log("fine"),this.starting=!1,this.render())}))},setPlayerTwo(){this.playerTwo.ships=y[1],console.log(this.playerTwo)},checkBoardHits(n,r){let e=!0;return r.boardHits.map((r=>{e=r[0]===n[0]&&r[1]===n[1]})),e},playerTwoMove(){let n=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());console.log([n,r]);let e=!1;this.playerOne.boardHits.length>0&&(e=this.checkBoardHits([n,r],this.playerOne),console.log(e)),B!=this.playerOne||e?(console.log("falsenpx"),this.playerTwoMove()):(g(B,[n,r]),this.switchPlayer()),this.render()},switchPlayer(){console.log("switch"),console.log(B),B==this.playerTwo?(B=this.playerOne,this.playerTwoMove()):B=this.playerTwo},getShipBoxs(n){let r=this.calcShipLocation(n,this.size),e=[];return r.forEach((n=>{for(const r of this.boxs)r.id==`${n}`&&e.push(r)})),e},setColor(n,r){n.forEach((n=>{n.style.backgroundColor=r}))},calcShipLocation(n,r){let e=[],t=n.split(",").map((n=>Number(n)));for(let n=0;n<r;n++)"ver"==this.direction?e.push(`${t[0]},${t[1]+n}`):"hor"==this.direction&&e.push(`${t[0]+n},${t[1]}`);return e},render(){this.starting?(this.shipsToPlace.length>0?(this.size=this.shipsToPlace[0].size,this.order.innerText=`Place You ${this.shipsToPlace[0].name}`):(this.starting=!1,this.order.innerText="start Game"),this.playerOne.ships.forEach((n=>{n.location.forEach((n=>{for(const r of this.boxs)r.id==`${n[0]},${n[1]}`&&(r.classList="boxset")}))})),this.errorMessage.innerText=""):(this.startingDiv.style.display="none",this.renderShips(),this.renderMissedHits(this.playerTwo,this.playerOneContainer),this.renderMissedHits(this.playerOne,this.playerTwoContainer),this.renderHits(this.playerTwo,this.playerOneContainer),this.renderHits(this.playerOne,this.playerTwoContainer),this.winCheck(this.playerOne)?(console.log("winner is "+this.playerTwo.name),this.winnerBoard.style.display="flex",this.winnerName.innerText=this.playerTwo.name):this.winCheck(this.playerTwo)&&(console.log("winner is "+this.playerOne.name),this.winnerBoard.style.display="flex",this.winnerName.innerText=this.playerOne.name))},renderShips(){let n=this.playerOne.ships.map((n=>[...n.location])).flat(),r=this.playerTwoContainer.childNodes;n.forEach((n=>{for(const e of r){let r=e.id.split(",").map((n=>Number(n)));r[0]==n[0]&&r[1]==n[1]&&(e.style.backgroundColor="green")}}))},renderMissedHits(n,r){let e=r.childNodes;n.boardHits.forEach((n=>{for(const r of e){let e=r.id.split(",").map((n=>Number(n)));e[0]==n[0]&&e[1]==n[1]&&(r.style.backgroundColor="darkslategray")}}))},renderHits(n,r){let e,t=r.childNodes;n.ships.forEach((n=>{e=0==n.isSunked?"red":"brown",n.damage.forEach((n=>{for(const r of t){let t=r.id.split(",").map((n=>Number(n)));t[0]==n[0]&&t[1]==n[1]&&(r.style.backgroundColor=e)}}))}))},winCheck:n=>n.ships.every((n=>1==n.isSunked))}).Init(),console.log("working")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,